
////////////////////////////////////////////////////////
CREATE TABLE history_salary(
	employee_id varchar(255) NOT NULL,
    timestamp int(11) UNSIGNED NOT NULL,
    amount int(11) UNSIGNED NOT NULL,
    amount_type varchar(255) NOT NULL,
    salaey int(11) UNSIGNED NOT NULL,
    overtime int(11) UNSIGNED NOT NULL,
    commission int(11) UNSIGNED NOT NULL,
    PRIMARY KEY (employee_id)
);
CREATE TABLE worktime(
	employee_id varchar(255) NOT NULL,
    starttime int(11) UNSIGNED NOT NULL,
    endtime int(11) UNSIGNED NOT NULL,
    PRIMARY KEY (employee_id)
);
CREATE TABLE workleave(
	employee_id varchar(255) NOT NULL,
    timestamp int(11) UNSIGNED NOT NULL,
    description varchar(255),
    type varchar(255),
    starttime int(11) UNSIGNED NOT NULL,
    endtime int(11) UNSIGNED NOT NULL,
    PRIMARY KEY (employee_id)
);
CREATE TABLE employee(
	employee_id varchar(255) NOT NULL,
    social_id varchar(255) NOT NULL,
    is_registered boolean NOT NULL,
    registered_time DATE NOT NULL,
    display_name varchar(255) NOT NULL,
    phone varchar(10) NOT NULL,
    email varchar(255) NOT NULL,
    picture_url varchar(255) NOT NULL,
    lasttime_active DATE NOT NULL,
    permission varchar(255) NOT NULL,
    work_background varchar(255) NOT NULL,
    graduation_certificate varchar(255) NOT NULL,
    role_type varchar(255) NOT NULL,
    prefixname varchar(255) NOT NULL,
    fname varchar(255) NOT NULL,
    lname varchar(255) NOT NULL,
    nickname varchar(255) NOT NULL,
    wage_type varchar(255) NOT NULL,
    wage_amount int NOT NULL CHECK (wage_amount >= 100),
    PRIMARY KEY (employee_id),
    UNIQUE KEY (social_id),
    CONSTRAINT wl
    	FOREIGN KEY (employee_id)
    	REFERENCES workleave(employee_id)
    	ON DELETE CASCADE
    	ON UPDATE CASCADE
);

ALTER TABLE employee
ADD CONSTRAINT wt
    	FOREIGN KEY (employee_id)
    	REFERENCES worktime(employee_id)
    	ON DELETE CASCADE
    	ON UPDATE CASCADE;

ALTER TABLE employee
ADD CONSTRAINT wh
    	FOREIGN KEY (employee_id)
    	REFERENCES history_salary(employee_id)
    	ON DELETE CASCADE
    	ON UPDATE CASCADE;
////////////////////////////////////////////////////////
CREATE TABLE commission(
	commission_id varchar(255) NOT NULL,
    topic varchar(255) NOT NULL,
    description varchar(255) NOT NULL,
    quota_type varchar(255) NOT NULL,
    quota_amount int(11) UNSIGNED NOT NULL,
    amount_type varchar(255) NOT NULL,
    amount int(11) UNSIGNED NOT NULL,
    position varchar(255) NOT NULL,
    PRIMARY KEY (commission_id)
);
////////////////////////////////////////////////////////



////////////////////////////////////!
/////////////////////////////////////
///////////////////////////////////////
CREATE TABLE users(
	timestamp varchar(255) NOT NULL,
    u_id varchar(255) NOT NULL,
    nickname varchar(255) NOT NULL,
    phone int(10) NOT NULL,
    rank varchar(255) DEFAULT 'unrank' NOT NULL,
    member boolean DEFAULT FALSE NOT NULL,
    picture_url varchar(255) NOT NULL,
    social_id varchar(255) NOT NULL,
    social_from varchar(255) NOT NULL,
    PRIMARY KEY (u_id)
);


CREATE TABLE queue(
    timestamp varchar(255) NOT NULL,
    q_id varchar(255) NOT NULL,
    u_id varchar(255) NOT NULL,
    type_of_car varchar(255) NOT NULL,
    nickname varchar(255) NOT NULL,
    phone varchar(10) NOT NULL,
    status varchar(255) NOT NULL,
    PRIMARY KEY (q_id)
);

CREATE TABLE booking (
	timestamp varchar(255) NOT NULL,
    q_id varchar(255) NOT NULL,
    u_id varchar(255) NOT NULL,
    datetime_booking int(11) NOT NULL,
    PRIMARY KEY (u_id)
);

CREATE TABLE events(
	timestamp varchar(255) NOT NULL,
    e_id varchar(255) NOT NULL,
    type varchar(255) NOT NULL,
    table_of varchar(255) NOT NULL,
    id varchar(255) NOT NULL,
    PRIMARY KEY (e_id)
);

CREATE TABLE service(
	timestamp int(25) NOT NULL,
    q_id varchar(255) NOT NULL,
    s_id varchar(255) NOT NULL
);

CREATE TABLE service_info(
	s_id varchar(255) NOT NULL,
    detail varchar(255) NOT NULL,
    sub_detail varchar(255) NOT NULL,
    price int(11) NOT NULL,
    picture_url varchar(255) NOT NULL,
    PRIMARY KEY (s_id)
);

CREATE VIEW queueToDay2 AS
SELECT * FROM queue
WHERE timestamp > UNIX_TIMESTAMP(CURRENT_DATE())*1000
ORDER BY CASE 
		 WHEN status = 'thankyou' then 1
         WHEN status = 'complete' then 2
         WHEN status = 'working' then 3
         WHEN status = 'waiting' then 4
         WHEN status = 'booking' then 5
         END ASC, timestamp ASC;

          	1658985935939